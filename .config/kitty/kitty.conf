####################################################################
### Fonts
####################################################################

# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants. By default they are derived
# automatically, by the OSes font system. Setting them manually is
# useful for font families that have many weight variants like Book,
# Medium, Thick, etc. For example:
#     font_family      Operator Mono Book
#     bold_font        Operator Mono Medium
#     italic_font      Operator Mono Book Italic
#     bold_italic_font Operator Mono Medium Italic
font_family      FiraCode Nerd Font Mono
bold_font        auto
italic_font      auto
bold_italic_font auto

# Font size (in pts)

# Kitty always hints fonts or at least positions them on a subpixel
# grid. Font-config antialiasing settings seem not to affect kitty.
font_size        11

# do not force left-to-right (on right-to-left scripts)
force_ltr no

# Map the specified unicode codepoints to a particular font. Useful if
# you need special rendering for some symbols, such as for
# Powerline. Avoids the need for patched fonts. Each unicode code
# point is specified in the form U+<code point in hexadecimal>. You
# can specify multiple code points, separated by commas and ranges
# separated by hyphens. symbol_map itself can be specified multiple
# times. Syntax is:
#     symbol_map codepoint[,codepoint ...] Font-Family-Name
symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

# Usually, for Private Use Unicode characters and some symbol/dingbat
# characters, if the character is followed by one or more spaces,
# kitty will use those extra cells to render the character larger, if
# the character in the font has a wide aspect ratio. Using this
# option you can force kitty to restrict the specified code points to
# render in the specified number of cells (defaulting to one cell).
# This option can be specified multiple times. The syntax is::
# E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1
# narrow_symbols

# Choose how you want to handle multi-character ligatures. The default
# is to always render them. You can tell kitty to not render them when
# the cursor is over them by using cursor to make editing easier, or
# have kitty never render them at all by using always, if you don’t
# like them. The ligature strategy can be set per-window either using
# the kitty remote control facility or by defining shortcuts for it in
# kitty.conf, for example:
#     map alt+1 disable_ligatures_in active always
#     map alt+2 disable_ligatures_in all never
#     map alt+3 disable_ligatures_in tab cursor
# Note that this refers to programming ligatures, typically
# implemented using the calt OpenType feature. For disabling general
# ligatures, use the font_features setting.
#
# For the exact syntax to use for individual features, see the
# HarfBuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
# common.html#hb-feature-from-string>.
#
# On Linux, font features are first read from the FontConfig database
# and then this option is applied, so they can be configured in a
# single, central place.
# To get the PostScript name for a font, use `kitty +list-fonts --psnames`
#     $ kitty +list-fonts --psnames | grep Fira
disable_ligatures cursor

# font features: see https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.font_features
# FiraCode supports the following features (see https://github.com/tonsky/FiraCode/wiki/How-to-enable-stylistic-sets):
#     ss01: sans serif lowercase 'r'
#     ss02: horizontal bars in less(greater)-than-equal-signs
#     ss03: tradional ampersand-sign
#     ss04: non strike-through dollar-sign
#     ss05: traditional at-sign
#     ss06: thin backslash-sign, but thick backslash-escaped backslash-sign
#     ssß7: =~ and !~ are substituted by wavy (not-)equal-signs
#     ss08: gaps in double/triple (un)equal-signs
#     zero: dotted zero (instead of strike through zero)
#     onum: small and descending digits
font_features FiraCode-Regular -ss01 -ss02 +ss03 -ss04 +ss05 -ss06 +ss07 -ss08 +zero +onum 
font_features FiraCodeNF-Reg -ss01 -ss02 +ss03 -ss04 +ss05 -ss06 +ss07 -ss08 +zero +onum 
font_features FiraCode-Bold -ss01 -ss02 +ss03 -ss04 +ss05 -ss06 +ss07 -ss08 +zero +onum 
font_features FiraCodeNF-Bold -ss01 -ss02 +ss03 -ss04 +ss05 -ss06 +ss07 -ss08 +zero +onum 

# Modify font characteristics such as the position or thickness of
# the underline and strikethrough. The modifications can have the
# suffix px for pixels or % for percentage of original value. No
# suffix means use pts. For example::
#     modify_font underline_position -2
#     modify_font underline_thickness 150%
#     modify_font strikethrough_position 2px
# Additionally, you can modify the size of the cell in which each
# font glyph is rendered and the baseline at which the glyph is
# placed in the cell. For example::
#     modify_font cell_width 80%
#     modify_font cell_height -2px
#     modify_font baseline 3
# Note that modifying the baseline will automatically adjust the
# underline and strikethrough positions by the same amount.
# Increasing the baseline raises glyphs inside the cell and
# decreasing it lowers them. Decreasing the cell size might cause
# rendering artifacts, so use with care.
#modify_font

# Change the sizes of the lines used for the box drawing unicode
# characters These values are in pts. They will be scaled by the
# monitor DPI to arrive at a pixel value. There must be four values
# corresponding to thin, normal, thick, and very thick lines.
box_drawing_scale 0.001, 1, 1.5, 2

# The style with which undercurls are rendered. This option takes the
# form (thin|thick)-(sparse|dense). Thin and thick control the
# thickness of the undercurl. Sparse and dense control how often the
# curl oscillates. With sparse the curl will peak once per character,
# with dense twice.
undercurl_style thin-sparse

# Control how kitty composites text glyphs onto the background color.
# The default value of platform tries for text rendering as close to
# "native" for the platform kitty is running on as possible.
#
# A value of legacy uses the old (pre kitty 0.28) strategy for how
# glyphs are composited. This will make dark text on light
# backgrounds look thicker and light text on dark backgrounds
# thinner. It might also make some text appear like the strokes are
# uneven.
#
# You can fine tune the actual contrast curve used for glyph
# composition by specifying up to two space-separated numbers for
# this setting.
#
# The first number is the gamma adjustment, which controls the
# thickness of dark text on light backgrounds. Increasing the value
# will make text appear thicker. The default value for this is 1.0 on
# Linux and 1.7 on macOS. Valid values are 0.01 and above. The result
# is scaled based on the luminance difference between the background
# and the foreground. Dark text on light backgrounds receives the
# full impact of the curve while light text on dark backgrounds is
# affected very little.
#
# The second number is an additional multiplicative contrast. It is
# percentage ranging from 0 to 100. The default value is 0 on Linux
# and 30 on macOS.
#
# If you wish to achieve similar looking thickness in light and dark
# themes, a good way to experiment is start by setting the value to
# 1.0 0 and use a dark theme. Then adjust the second parameter until
# it looks good. Then switch to a light theme and adjust the first
# parameter until the perceived thickness matches the dark theme.
text_composition_strategy platform

# The minimum accepted difference in luminance between the foreground
# and background color, below which kitty will override the
# foreground color. It is percentage ranging from 0 to 100. If the
# difference in luminance of the foreground and background is below
# this threshold, the foreground color will be set to white if the
# background is dark or black if the background is light. The default
# value is 0, which means no overriding is performed. Useful when
# working with applications that use colors that do not contrast well
# with your preferred color scheme.
text_fg_override_threshold 0


####################################################################
### Cursor
####################################################################

# The cursor color
cursor           red

# Foreground color of text under cursor with special keyword: 'background'
cursor_text_color white

# The cursor shape can be one of block, beam, underline. Note that
# when reloading the config this will be changed only if the cursor
# shape has not been set by the program running in the terminal. This
# sets the default cursor shape, applications running in the terminal
# can override it. In particular, shell integration
# <https://sw.kovidgoyal.net/kitty/shell-integration/> in kitty sets
# the cursor shape to beam at shell prompts. You can avoid this by
# setting shell_integration to no-cursor.
cursor_shape     block

# Defines the thickness of the beam cursor (in pts)
cursor_beam_thickness 1.5

# Defines the thickness of the underline cursor (in pts)
cursor_underline_thickness 2.0

# Cursor blink interval in second. Set to zero to disable blinking. Use negative values for system default.
cursor_blink_interval 0.5

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to zero to never stop blinking.
cursor_stop_blinking_after -1



####################################################################
### Scrollback
####################################################################

# Number of lines of history to keep in memory for scrolling
# back. Memory is allocated on demand. Negative numbers are
# (effectively) infinite scrollback. Note that using very large
# scrollback is not recommended as it can slow down performance of the
# terminal and also use large amounts of RAM. Instead, consider using
# scrollback_pager_history_size. Note that on config reload if this is
# changed it will only affect newly created windows, not existing
# ones.
scrollback_lines 20000

# Program with which to view scrollback in a new window. The
# scrollback buffer is passed as STDIN to this program. If you change
# it, make sure the program you use can handle ANSI escape sequences
# for colors and text formatting. INPUT_LINE_NUMBER in the command
# line above will be replaced by an integer representing which line
# should be at the top of the screen. Similarly CURSOR_LINE and
# CURSOR_COLUMN will be replaced by the current cursor position.
scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

# Separate scrollback history size, used only for browsing the
# scrollback buffer (in MB). This separate buffer is not available for
# interactive scrolling but will be piped to the pager program when
# viewing scrollback buffer in a separate window. The current
# implementation stores the data in UTF-8, so approximatively 10000
# lines per megabyte at 100 chars per line, for pure ASCII text,
# unformatted text. A value of zero or less disables this feature. The
# maximum allowed size is 4GB. Note that on config reload if this is
# changed it will only affect newly created windows, not existing
# ones.
scrollback_pager_history_size 4

# Fill new space with lines from the scrollback buffer after enlarging
# a window.
scrollback_fill_enlarged_window yes

# Modify the amount scrolled by the mouse wheel and touchpad. Note
# this is only used for low precision scrolling devices, not for high
# precision scrolling on platforms such as macOS and Wayland. Use
# negative numbers to change scroll direction.
wheel_scroll_multiplier 1.0
touch_scroll_multiplier 1.0

# The minimum number of lines scrolled by the mouse wheel. The scroll
# multiplier wheel_scroll_multiplier only takes effect after it
# reaches this number. Note that this is only used for low precision
# scrolling devices like wheel mice that scroll by very small amounts
# when using the wheel. With a negative number, the minimum number of
# lines will always be added.
wheel_scroll_min_lines 1


####################################################################
### Mouse
####################################################################

# Hide mouse cursor after the specified number of seconds of the mouse
# not being used. Set to zero to disable mouse cursor hiding. Set to a
# negative value to hide the mouse cursor immediately when typing
# text.
mouse_hide_wait 0.0

# The color and style for highlighting URLs on mouse-over. url_style
# can be one of: none, single, double, curly
url_color #0087bd
url_style curly

# The program with which to open URLs that are clicked on. The special
# value default means to use the operating system’s default URL
# handler.
open_url_with xdg-open

# The set of URL prefixes to look for when detecting a URL under the
# mouse cursor.
url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

# Detect URLs under the mouse. Detected URLs are highlighted with an
# underline and the mouse cursor becomes a hand over them. Even if
# this option is disabled, URLs are still clickable.
detect_urls yes

# Additional characters to be disallowed from URLs, when detecting
# URLs under the mouse cursor. By default, all characters legal in
# URLs are allowed.
# url_excluded_characters

# When the mouse hovers over a terminal hyperlink, show the actual
# URL that will be activated when the hyperlink is clicked.
show_hyperlink_targets yes

# Copy to clipboard or a private buffer on select. With this set to
# clipboard, simply selecting text with the mouse will cause the text
# to be copied to clipboard. You can instead specify a name such as a1
# to copy to a private kitty buffer instead. Map a shortcut with the
# paste_from_buffer action to paste from this private buffer. For
# example:
#     map cmd+shift+v paste_from_buffer a1
copy_on_select clipboard

# A comma separated list of actions to take when pasting text into
# the terminal. The supported paste actions are:
# quote-urls-at-prompt:
#     If the text being pasted is a URL and the cursor is at a shell prompt,
#     automatically quote the URL (needs shell_integration).
# confirm:
#     Confirm the paste if bracketed paste mode is not active or there is
#     a large amount of text being pasted.
# filter:
#     Run the filter_paste() function from the file paste-actions.py in
#     the kitty config directory on the pasted text. The text returned by the
#     function will be actually pasted.
#paste_actions quote-urls-at-prompt

# Remove spaces at the end of lines when copying to clipboard. A value
# of smart will do it when using normal selections, but not rectangle
# selections. always will always do it.
strip_trailing_spaces never

# Characters considered part of a word when double clicking. In
# addition to these characters any character that is marked as an
# alphanumeric character in the unicode database will be matched.
select_by_word_characters @-./_~?&=%+#

# Characters considered part of a word when extending the selection
# forward on double clicking. In addition to these characters any
# character that is marked as an alphanumeric character in the
# Unicode database will be matched.
# If empty (default) select_by_word_characters will be used for both
# directions.
#select_by_word_characters_forward

# The interval between successive clicks to detect double/triple
# clicks (in seconds). Negative numbers will use the system default
# instead, if available, or fallback to 0.5.
click_interval -1.0

# Focus follows mouse for kitty subwindows.
focus_follows_mouse yes

# The shape of the mouse pointer when the program running in the
# terminal activates mouse protocol (arrow, beam and hand).
pointer_shape_when_grabbed arrow

# The default shape of the mouse pointer. Valid values are: arrow,
# beam and hand
default_pointer_shape arrow

# The default shape of the mouse pointer when dragging across
# text. Valid values are: arrow, beam and hand
pointer_shape_when_dragging beam



####################################################################
### Mouse actions
####################################################################

#  The syntax is:
# mouse_map button-name event-type modes action

# Where button-name is one of left, middle, right, b1 ... b8 with
# added keyboard modifiers. For example: ctrl+shift+left refers to
# holding the Ctrl+Shift keys while clicking with the left mouse
# button. The value b1 ... b8 can be used to refer to up to eight
# buttons on a mouse.

# event-type is one of press, release, doublepress, triplepress,
# click, doubleclick. modes indicates whether the action is performed
# when the mouse is grabbed by the program running in the terminal,
# or not. The values are grabbed or ungrabbed or a comma separated
# combination of them. grabbed refers to when the program running in
# the terminal has requested mouse events. Note that the click and
# double click events have a delay of click_interval to disambiguate
# from double and triple presses.

# You can have kitty remove all mouse actions seen up to this
# point. Useful, for instance, to remove the default mouse actions.
clear_all_mouse_actions yes


# The value of kitty_mod is used as the modifier for all default
# shortcuts, you can change it in your kitty.conf to change the
# modifiers for all the default shortcuts.
kitty_mod super+alt

# Try to perform the specified actions one after the other till one of
# them is successful. Supported actions are:
#   selection - check for a selection and if one exists abort processing
#   link - if a link exists under the mouse, click it
#   prompt - if the mouse click happens at a shell prompt move the cursor to the mouse location
# First check for a selection and if one exists do nothing. Then
# check for a link under the mouse cursor and if one exists, click
# it. Finally check if the click happened at the current shell
# prompt and if so, move the cursor to the click location. Note
# that this requires shell integration to work.
mouse_map left click ungrabbed mouse_handle_click selection link prompt
mouse_map kitty_mod+left click grabbed,ungrabbed mouse_handle_click selection link prompt

# Paste from the primary selection
#mouse_map middle release ungrabbed paste_from_selection
mouse_map kitty_mod+middle release grabbed,ungrabbed paste_from_selection

# Start selecting text
mouse_map left press ungrabbed mouse_selection normal
mouse_map kitty_mod+left press ungrabbed mouse_selection rectangle

# Select a word, line
mouse_map left doublepress ungrabbed mouse_selection word
mouse_map left triplepress ungrabbed mouse_selection line

# Extend the current selection
mouse_map right press ungrabbed mouse_selection extend



####################################################################
### Performance tuning
####################################################################

# Delay (in milliseconds) between screen updates.
repaint_delay 10

# Delay (in milliseconds) before input from the program running in the
# terminal is processed.
input_delay 3

# Sync screen updates to the refresh rate of the monitor. Limits the
# rendering speed to the refresh rate of your monitor. (I see tearing
# even with on, but it is somehow reduced)
sync_to_monitor yes



####################################################################
### Bell
####################################################################

# audio bell
enable_audio_bell no

# Visual bell duration. Flash the screen when a bell occurs for the
# specified number of seconds. Set to zero to disable.
visual_bell_duration 0.2

# color of visual bell
visual_bell_color #505050

# Request window attention on bell. Makes the dock icon bounce on
# macOS or the taskbar flash on linux.
window_alert_on_bell yes

# Show a bell symbol on the tab if a bell occurs in one of the windows
# in the tab and the window is not the currently focused window
bell_on_tab "🔔 "

# Program to run when a bell occurs. The environment variable
# KITTY_CHILD_CMDLINE can be used to get the program running in the
# window in which the bell occurred.
command_on_bell none

# Path to a sound file to play as the bell sound. If set to none, the
# system default bell sound is used. Must be in a format supported by
# the operating systems sound API, such as WAV or OGA on Linux
# (libcanberra) or AIFF, MP3 or WAV on macOS (NSSound)
bell_path none

# The XDG Sound Theme kitty will use to play the bell sound. Defaults
# to the custom theme name used by GNOME and Budgie, falling back to
# the default freedesktop theme if it does not exist. This option may
# be removed if Linux ever provides desktop-agnostic support for
# setting system sound themes.
linux_bell_theme __custom


####################################################################
### Window layout
####################################################################

# If enabled, the window size will be remembered so that new instances
# of kitty will have the same size as the previous instance. If
# disabled, the window will initially have size configured by
# initial_window_width/height, in pixels. You can use a suffix of “c”
# on the width/height values to have them interpreted as number of
# cells instead of pixels.
remember_window_size  no
initial_window_width  640
initial_window_height 400

# The enabled window layouts. A comma separated list of layout
# names. The special value all means all layouts. The first listed
# layout will be used as the startup layout. Default configuration is
# all layouts in alphabetical order (Fat, Grid, Horizontal, Splits,
# Stack, Tall, Vertical).
#     Fat          One (or optionally more) windows are shown full
#                  width on the top, the rest of the windows are
#                  shown side-by-side on the bottom
#     Grid         All windows are shown in a grid
#     Horizontal   All windows are shown side-by-side
#     Splits       Windows arranged in arbitrary patterns created
#                  using horizontal and vertical splits
#     Stack        Only a single maximized window is shown at a time
#     Tall         One (or optionally more) windows are shown full
#                  height on the left, the rest of the windows are
#                  shown one below the other on the right
#     Vertical     All windows are shown one below the other
enabled_layouts *

# The step size (in units of cell width/cell height) to use when
# resizing windows. The cells value is used for horizontal resizing
# and the lines value for vertical resizing.
window_resize_step_cells 2
window_resize_step_lines 2

# The width of kitty-internal window borders. Can be either in pixels
# (px) or pts (pt).
window_border_width 3px

# Only draw borders, which seperate kitty-internal windows
draw_minimal_borders yes

# The window margin (in pts) (blank area outside the border). A single
# value sets all four sides. Two values set the vertical and
# horizontal sides. Three values set top, horizontal and bottom. Four
# values set top, right, bottom and left.
window_margin_width 0

# The window margin (in pts) to use when only a single window is
# visible. Arguments are as for winodw_margin_width, except for
# negative values, which will cause the value of window_margin_width
# to be used instead.
single_window_margin_width -1

# The window padding (in pts) (blank area between the text and the
# window border). A single value sets all four sides. Two values set
# the vertical and horizontal sides. Three values set top, horizontal
# and bottom. Four values set top, right, bottom and left.
window_padding_width 0

# When the window size is not an exact multiple of the cell size, the
# cell area of the terminal window will have some extra padding on the
# sides. You can control how that padding is distributed with this
# option. Using a value of center means the cell area will be placed
# centrally. A value of top-left means the padding will be on only the
# bottom and right edges.
placement_strategy top-left

# Diverse colors. Set colors for active kitty-internal windows to
# none to disable the coloring. 
active_border_color #285577
inactive_border_color #5f676a
bell_border_color #ff0000
inactive_text_alpha 1.0

# Hide the window decorations (title-bar and window borders).
hide_window_decorations no

# Path to a logo image. Must be in PNG format. Relative paths are
# interpreted relative to the kitty config directory. The logo is
# displayed in a corner of every kitty window. The position is
# controlled by window_logo_position. Individual windows can be
# configured to have different logos either using the launch action
# or the remote control <https://sw.kovidgoyal.net/kitty/remote-
# control/> facility.
window_logo_path /usr/lib/kitty/logo/kitty.png

# Where to position the window logo in the window. The value can be
# one of: top-left, top, top-right, left, center, right, bottom-left,
# bottom, bottom-right.
window_logo_position top-right

# The amount the logo should be faded into the background. With zero
# being fully faded and one being fully opaque.
window_logo_alpha 0.1

# The time to wait before redrawing the screen during a live resize of
# the OS window, when no new resize events have been received,
# i.e. when resizing is either paused or finished. On platforms such
# as macOS, where the operating system sends events corresponding to
# the start and end of a live resize, the second number is used for
# redraw-after-pause since kitty can distinguish between a pause and
# end of resizing.  On such systems the first number is ignored and
# redraw is immediate after end of resize.  On other systems the first
# number is used so that kitty is "ready" quickly after the end of
# resizing, while not also continuously redrawing, to save energy.  (I
# can't perceive any effect, but a value of 0 gives sporadic warning
# messages "Invalid geometry ..").
resize_debounce_time 0.1 0.5

# Resize the OS window in steps as large as the cells, instead of with
# the usual pixel accuracy. Combined with an initial_window_width and
# initial_window_height in number of cells, this option can be used to
# keep the margins as small as possible when resizing the OS
# window. Note that this does not currently work on Wayland.
resize_in_steps yes

# Ask for confirmation when closing an OS window or a tab that has at
# least this number of kitty windows in it. A value of zero disables
# confirmation. This confirmation also applies to requests to quit the
# entire application (all OS windows, via the quit action).
confirm_os_window_close 0


####################################################################
### Tabbar
####################################################################

# Which edge to show the tab bar on, top or bottom.
tab_bar_edge top

# The margin to the left and right of the tab bar (in pts).
tab_bar_margin_width 0.0

# The margin above and below the tab bar (in pts). The first number
# is the margin between the edge of the OS Window and the tab bar.
# The second number is the margin between the tab bar and the
# contents of the current tab.
tab_bar_margin_height 0.0 0.0

# The tab bar style (fade, slant, separator, powerline, hidden).
tab_bar_style powerline

# The horizontal alignment of the tab bar, can be one of: left,
# center, right.
tab_bar_align left

# The minimum number of tabs that must exist before the tab bar is
# shown.
tab_bar_min_tabs 2

# The algorithm to use when switching to a tab when the current tab is
# closed (previous, left, right, last). A value of last will switch to
# the right-most tab.
tab_switch_strategy previous

# Control how each tab fades into the background when using fade for
# the tab_bar_style. Each number is an alpha (between zero and one)
# that controls how much the corresponding cell fades into the
# background, with zero being no fade and one being full fade. You can
# change the number of cells used by adding/removing entries to this
# list.
tab_fade 0.25 0.5 0.75 1

# The separator between tabs in the tab bar when using separator as
# the tab_bar_style.
tab_separator " ┇"

# The powerline separator style between tabs in the tab bar when using
# powerline as the tab_bar_style (angled, slanted, round).
tab_powerline_style angled

# Some text or a unicode symbol to show on the tab if a window in the
# tab that does not have focus has some activity. If you want to use
# leading or trailing spaces surround the text with quotes.
tab_activity_symbol none

# A template to render the tab title. The default just renders the
# title with optional symbols for bell and activity. If you wish to
# include the tab-index as well, use something like: {index}:{title}.
# Useful if you have shortcuts mapped for goto_tab N. If you prefer
# to see the index as a superscript, use {sup.index}. All data
# available is:
#
# title
#     The current tab title.
# index
#     The tab index usable with goto_tab N goto_tab shortcuts.
# layout_name
#     The current layout name.
# num_windows
#     The number of windows in the tab.
# num_window_groups
#     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
# tab.active_wd
#     The working directory of the currently active window in the tab
#     (expensive, requires syscall). Use active_oldest_wd to get
#     the directory of the oldest foreground process rather than the newest.
# tab.active_exe
#     The name of the executable running in the foreground of the currently
#     active window in the tab (expensive, requires syscall). Use
#     active_oldest_exe for the oldest foreground process.
# max_title_length
#     The maximum title length available.
#
# Note that formatting is done by Python's string formatting
# machinery, so you can use, for instance, {layout_name[:2].upper()}
# to show only the first two letters of the layout name, upper-cased.
# If you want to style the text, you can use styling directives, for
# example:
tab_title_template "{title}"

# Tab title for active tab. If none, falls back to tab_title_template.
active_tab_title_template none

# Tab colors.
active_tab_foreground   white
active_tab_background   #285577
active_tab_font_style   italic
inactive_tab_foreground white
inactive_tab_background #5f676a
inactive_tab_font_style normal
tab_bar_background none

# Color for the tab bar margin area. Defaults to using the terminal
# background color for margins above and below the tab bar. For side
# margins the default color is chosen to match the background color
# of the neighboring tab.
tab_bar_margin_color none


####################################################################
### Color scheme
####################################################################

foreground #bbbbbb
background #323232
background_opacity 1.0

# Set to a positive value to enable background blur (blurring of the
# visuals behind a transparent window) on platforms that support it.
# Only takes effect when background_opacity is less than one. On
# macOS, this will also control the blur radius (amount of blurring).
# Setting it to too high a value will cause severe performance issues
# and/or rendering artifacts. Usually, values up to 64 work well.
# Note that this might cause performance issues, depending on how the
# platform implements it, so use with care. Currently supported on
# macOS and KDE/X11.
background_blur 0

# background image, layout (tiled or scaled), interpolation
background_image none
background_image_layout tiled
background_image_linear yes

# Allow changing of the background_opacity dynamically, using either
# keyboard shortcuts (ctrl+shift+a>m and ctrl+shift+a>l) or the remote
# control facility. Changing this setting by reloading the config is
# not supported.
dynamic_background_opacity no

# How much to tint the background image by the background color. The
# tint is applied only under the text area, not margin/borders. Makes
# it easier to read the text. Tinting is done using the current
# background color for each window. This setting applies only if
# background_opacity is set and transparent windows are supported or
# background_image is set.
background_tint 0.0

# How much to tint the background image at the window gaps by the
# background color, after applying background_tint. Since this is
# multiplicative with background_tint, it can be used to lighten the
# tint over the window gaps for a *separated* look.
background_tint_gaps 1.0

# How much to dim text that has the DIM/FAINT attribute set. One means
# no dimming and zero means fully dimmed (i.e. invisible).
dim_opacity 0.75

# selection colors
selection_foreground black
selection_background #eeee99



####################################################################
### Color table
####################################################################

# Xterm default color scheme (see XTerm-col.ad)
# dull colors
color0 #000000
color1 #cd0000
color2 #00cd00
color3 #cdcd00
color4 #0064cd
color5 #cd00cd
color6 #00cdcd
color7 #cdcdcd
# bright colors
color8 #323232
color9 #ff0000
color10 #00ff00
color11 #ffff00
color12 #007cff
color13 #ff00ff
color14 #00ffff
color15 #ffffff

# Color for marks
mark1_foreground black
mark1_background #98d3cb
mark2_foreground black
mark2_background #f2dcd3
mark3_foreground black
mark3_background #f274bc



####################################################################
### Advanced
####################################################################

# The shell program to execute. The default value of . means to use
# whatever shell is set as the default shell for the current user.
shell .

# The terminal editor (such as vim or nano) to use when editing the
# kitty config file or similar tasks.  The default value of . means to
# use the environment variables VISUAL and EDITOR in that order.
editor emacs -nw

# Close the window when the child process (shell) exits. If no (the
# default), the terminal will remain open when the child exits as long
# as there are still processes outputting to the terminal (for example
# disowned or backgrounded processes). If yes, the window will close
# as soon as the child process exits. Note that setting it to yes
# means that any background processes still using the terminal can
# fail silently because their stdout/stderr/stdin no longer work.
close_on_child_death no


# Allow other programs to control kitty using passwords. This option
# can be specified multiple times to add multiple passwords. If no
# passwords are present kitty will ask the user for permission if a
# program tries to use remote control with a password. A password can
# also *optionally* be associated with a set of allowed remote
# control actions. For example::
#     remote_control_password "my passphrase" get-colors set-colors focus-window focus-tab
# Only the specified actions will be allowed when using this
# password. Glob patterns can be used too, for example::
#     remote_control_password "my passphrase" set-tab-* resize-*
# To get a list of available actions, run::
#     kitty @ --help
# A set of actions to be allowed when no password is sent can be
# specified by using an empty password. For example::
#     remote_control_password "" *-colors
#remote_control_password


# Allow other programs to control kitty. If you turn this on other
# programs can control all aspects of kitty, including sending text to
# kitty windows, opening new windows, closing windows, reading the
# content of windows, etc. Note that this even works over ssh
# connections. You can chose to either allow any program running
# within kitty to control it, with yes or only programs that connect
# to the socket specified with the kitty --listen-on command line
# option, if you use the value socket-only. The latter is useful if
# you want to prevent programs running on a remote computer over ssh
# from controlling kitty. Reloading the config will not affect this
# setting.
allow_remote_control yes

# Tell kitty to listen to the specified unix/tcp socket for remote
# control connections. Note that this will apply to all kitty
# instances. It can be overridden by the kitty --listen-on command
# line flag. This option accepts only UNIX sockets, such as
# unix:${TEMP}/mykitty or (on Linux) unix:@mykitty. Environment
# variables are expanded. If {kitty_pid} is present then it is
# replaced by the PID of the kitty process, otherwise the PID of the
# kitty process is appended to the value, with a hyphen. This option
# is ignored unless you also set allow_remote_control to enable remote
# control. See the help for kitty --listen-on for more
# details. Changing this option by reloading the config is not
# supported.
listen_on none

# Specify environment variables to set in all child processes. Note
# that environment variables are expanded recursively, so if you use:
#env MYVAR=val

# Control where kitty finds the programs to run. The default search
# order is: First search the system wide PATH, then ~/.local/bin and
# ~/bin. If still not found, the PATH defined in the login shell
# after sourcing all its startup files is tried. Finally, if present,
# the PATH specified by the env option is tried.
#exe_search_path

# Periodically check if an update to kitty is available. If an update
# is found a system notification is displayed informing you of the
# available update. The default is to check every 24 hrs, set to zero
# to disable. Changing this option by reloading the config is not
# supported.
update_check_interval 0

# Path to a session file to use for all kitty instances. Can be
# overridden by using the kitty --session command line option for
# individual instances. See Startup Sessions in the kitty
# documentation for details. Note that relative paths are interpreted
# with respect to the kitty config directory. Environment variables in
# the path are expanded. Changing this option by reloading the config
# is not supported.
startup_session none

# Allow programs running in kitty to read and write from the
# clipboard. You can control exactly which actions are allowed. The
# set of possible actions is: write-clipboard read-clipboard
# write-primary read-primary. The default is to allow writing to the
# clipboard and primary selection. Note that enabling the read
# functionality is a security risk as it means that any program, even
# one running on a remote server via SSH can read your clipboard. See
# also :opt:` clipboard_max_size`.
clipboard_control read-clipboard read-primary write-clipboard write-primary

# The maximum size (in MB) of data from programs running in kitty that
# will be stored for writing to the system clipboard. See also
# clipboard_control. A value of zero means no size limit is applied.
clipboard_max_size 0

# The password that can be supplied to the file transfer kitten
# <https://sw.kovidgoyal.net/kitty/kittens/transfer/> to skip the
# transfer confirmation prompt. This should only be used when
# initiating transfers from trusted computers, over trusted networks
# or encrypted transports, as it allows any programs running on the
# remote machine to read/write to the local filesystem, without
# permission.
#file_transfer_confirmation_bypass

# Process hyperlink (OSC 8) escape sequences. If disabled OSC 8 escape
# sequences are ignored. Otherwise they become clickable links, that
# you can click by holding down ctrl+shift and clicking with the
# mouse. The special value of ask means that kitty will ask before
# opening the link.
allow_hyperlinks yes

# Enable shell integration on supported shells. This enables features
# such as jumping to previous prompts, browsing the output of the
# previous command in a pager, etc. on supported shells. Set to
# disabled to turn off shell integration, completely. It is also
# possible to disable individual features, set to a space separated
# list of these values: no-rc, no-cursor, no-title, no-cwd, no-
# prompt-mark, no-complete. See Shell integration
# <https://sw.kovidgoyal.net/kitty/shell-integration/> for details.
shell_integration enabled no-cursor

# Control whether programs running in the terminal can request new
# windows to be created. The canonical example is clone-in-kitty
# <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
# By default, kitty will ask for permission for each clone request.
# Allowing cloning unconditionally gives programs running in the
# terminal (including over SSH) permission to execute arbitrary code,
# as the user who is running the terminal, on the computer that the
# terminal is running on.
allow_cloning ask

# Control what shell code is sourced when running clone-in-kitty in
# the newly cloned window. The supported strategies are:
# venv
#     Source the file $VIRTUAL_ENV/bin/activate. This is used by the
#     Python stdlib venv module and allows cloning venvs automatically.
# conda
#     Run conda activate $CONDA_DEFAULT_ENV. This supports the virtual
#     environments created by conda.
# env_var
#     Execute the contents of the environment variable
#     KITTY_CLONE_SOURCE_CODE with eval.
# path
#     Source the file pointed to by the environment variable
#     KITTY_CLONE_SOURCE_PATH.
# This option must be a comma separated list of the above values.
# This only source the first valid one in the above order.
clone_source_strategies venv,conda,env_var,path

# The value of the TERM environment variable to set. 
#term xterm-kitty

####################################################################
### OS specific
####################################################################

# Change the color of the kitty window’s titlebar on Wayland systems
# with client side window decorations such as GNOME. A value of system
# means to use the default system color, a value of background means
# to use the background color of the currently active window and
# finally you can use an arbitrary color, such as #12af59 or red.
wayland_titlebar_color system

# Choose between Wayland and X11 backends. By default, an appropriate
# backend based on the system state is chosen automatically. Set it to
# x11 or wayland to force the choice. Changing this setting by
# reloading the config is not supported.
linux_display_server auto



####################################################################
### Keyboard shortcuts
####################################################################

# Keys are identified by their lowercase unicode characters.
# In addition, the following function keys are available:
#     escape, enter, tab, backspace, insert, delete, left, right, up,
#     down, page_up, page_down, home, end, caps_lock, scroll_lock,
#     num_lock, print_screen, pause, menu, f1, f2, f3, f4, f5, f6, f7,
#     f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20,
#     f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33,
#     f34, f35, kp_0, kp_1, kp_2, kp_3, kp_4, kp_5, kp_6, kp_7, kp_8,
#     kp_9, kp_decimal, kp_divide, kp_multiply, kp_subtract, kp_add,
#     kp_enter, kp_equal, kp_separator, kp_left, kp_right, kp_up,
#     kp_down, kp_page_up, kp_page_down, kp_home, kp_end, kp_insert,
#     kp_delete, kp_begin, media_play, media_pause, media_play_pause,
#     media_reverse, media_stop, media_fast_forward, media_rewind,
#     media_track_next, media_track_previous, media_record,
#     lower_volume, raise_volume, mute_volume, left_shift,
#     left_control, left_alt, left_super, left_hyper, left_meta,
#     right_shift, right_control, right_alt, right_super, right_hyper,
#     right_meta, iso_level3_shift, iso_level5_shift
# XKB names are also available, if the key is not one of the afore
# mentioned ones. Further, raw system key codes can be used as well
# (to find out the numbers, start kitty with --debug-input).

# Modifiers are one of shift, alt, ctrl, super, hyper, meta,
# caps_lock, num_lock, kitty-mod (see below).

# You can create aliases for kitten names, this allows overriding the
# defaults for kitten options and can also be used to shorten repeated
# mappings of the same kitten with a specific group of options. For
# example, the alias below changes the default value of "kitty +kitten
# hints --hints-offset" to zero for all mappings, including the builtin
# ones.
#     kitten_alias hints hints --hints-offset=0

# You can have kitty remove all shortcut definition seen up to this
# point. Useful, for instance, to remove the default shortcuts.
clear_all_shortcuts yes

# Aliases for actions, e.g.
# action_alias launch_tab launch --type=tab --cwd=current action_alias

# Map short cut keys to actions
#     map <mods+key> <action>
#     map <mods+key> combine <sep> <action1> <sep> <action2> ...

# font size
map kitty_mod++  increase_font_size
map kitty_mod+-  decrease_font_size
map kitty_mod+0  restore_font_size

# selection
map shift+insert       paste_from_clipboard
map ctrl+shift+insert  paste_from_selection

# scrolling
map shift+page_down scroll_page_down
map shift+page_up scroll_page_up
map shift+home scroll_home
map shift+end scroll_end
map kitty_mod+space show_scrollback

# window management
map kitty_mod+w        close_window
map kitty_mod+enter    new_window
map kitty_mod+up       next_window
map kitty_mod+down     previous_window
map kitty_mod+1        first_window
map kitty_mod+2        second_window
map kitty_mod+3        third_window
map kitty_mod+4        fourth_window
map kitty_mod+5        fifth_window
map kitty_mod+6        sixth_window
map kitty_mod+7        seventh_window
map kitty_mod+8        eighth_window
map kitty_mod+9        ninth_window
map kitty_mod+0        tenth_windowes

# Tab management
map kitty_mod+right    next_tab
map kitty_mod+left     previous_tab
map kitty_mod+t        new_tab
map kitty_mod+q        close_tab
map kitty_mod+l        next_layout

map kitty_mod+@ kitty_shell tab
map kitty_mod+r load_config_file

# Unicode input
map kitty_mod+u    kitten unicode_input

# toggle ligatures (with my own kitten ~/.config/kitty/toggle_ligatures.py)
map kitty_mod+f kitten toggle_ligatures.py
#map kitty_mod+s kitten view_alternative_screen.py
map kitty_mod+s launch --stdin-source=@alternate_scrollback --type=overlay --stdin-add-formatting less -r +G
